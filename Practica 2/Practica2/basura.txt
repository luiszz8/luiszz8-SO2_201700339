#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <string.h>
#include <ctype.h>
#include <stdbool.h>
#include <time.h>

#define MAX_USERS 111
#define MAX_LINE_LENGTH 100

typedef struct {
    int account_number;
    char name[50];
    float balance;
} User;

typedef struct {
    int thread_id;
    int start_index;
    int end_index;
    int loaded_users;
    int errors;
} ThreadData;

User users[MAX_USERS];
int total_users = 0;
int total_errors = 0;
pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
FILE *report; // Declarar como variable global para su acceso desde load_users()

bool is_valid_balance(const char *balance_str) {
    int length = strlen(balance_str);
    for (int i = 0; i < length; i++) {
        if (balance_str[i] == '\r' || balance_str[i] == '\n'|| balance_str[i] == '-') {
            continue; // Ignorar los caracteres de salto de línea
        }
        if (!isdigit(balance_str[i]) && balance_str[i] != '.') {
            return false;
        }
    }
    return true;
}

void *load_users(void *data) {
    ThreadData *thread_data = (ThreadData *)data;
    FILE *file = fopen("prueba_usuarios.csv", "r");
    if (file == NULL) {
        perror("Error al abrir el archivo");
        exit(EXIT_FAILURE);
    }

    char line[MAX_LINE_LENGTH];
    int index = 0;
    while (fgets(line, sizeof(line), file) != NULL) {
        if (index >= thread_data->start_index && index <= thread_data->end_index) {
            char *token = strtok(line, ",");
            int account_number = atoi(token);
            token = strtok(NULL, ",");
            char name[50];
            strcpy(name, token);
            token = strtok(NULL, ",");
            float balance = atof(token);

            if (!is_valid_balance(token))
            {
                pthread_mutex_lock(&mutex);
                total_errors++;
                fprintf(report, "Hilo %d: Error en línea %d - Número de cuenta: %d, Saldo no es número \n", 
                    thread_data->thread_id, index + 1, account_number);
                pthread_mutex_unlock(&mutex);
            }else if (account_number <= 0 || !is_valid_balance(token) || balance < 0 ) {
                pthread_mutex_lock(&mutex);
                total_errors++;
                fprintf(report, "Hilo %d: Error en línea %d - Número de cuenta: %d, Saldo: %.2f\n", 
                    thread_data->thread_id, index + 1, account_number, balance);
                pthread_mutex_unlock(&mutex);
            } else {
                pthread_mutex_lock(&mutex);
                int duplicate = 0;
                for (int i = 0; i < total_users; i++) {
                    if (users[i].account_number == account_number) {
                        duplicate = 1;
                        break;
                    }
                }
                if (duplicate) {
                    total_errors++;
                    fprintf(report, "Hilo %d: Error en línea %d - Número de cuenta duplicado: %d\n",
                        thread_data->thread_id, index + 1, account_number);
                } else {
                    User user;
                    user.account_number = account_number;
                    strcpy(user.name, name);
                    user.balance = balance;
                    users[total_users++] = user;
                    thread_data->loaded_users++;
                }
                pthread_mutex_unlock(&mutex);
            }
        }
        index++;
    }

    fclose(file);
    pthread_exit(NULL);
}

int main() {
    pthread_t threads[3];
    ThreadData thread_data[3];
    int lines_per_thread = MAX_USERS / 3;

    // Obtener la fecha y hora actual
    time_t current_time;
    struct tm *time_info;
    char time_str[20];
    time(&current_time);
    time_info = localtime(&current_time);
    strftime(time_str, sizeof(time_str), "%Y_%m_%d-%H_%M_%S", time_info);

    // Construir el nombre del archivo de reporte
    char report_filename[50];
    snprintf(report_filename, sizeof(report_filename), "carga_%s.log", time_str);

    // Abrir archivo de reporte
    report = fopen(report_filename, "w");
    if (report == NULL) {
        perror("Error al crear el archivo de reporte");
        exit(EXIT_FAILURE);
    }

    for (int i = 0; i < 3; i++) {
        thread_data[i].thread_id = i + 1;
        thread_data[i].start_index = i * lines_per_thread;
        if (i==0)
        {
            thread_data[i].start_index = 1;
        }
        
        thread_data[i].end_index = (i + 1) * lines_per_thread - 1;
        thread_data[i].loaded_users = 0;
        thread_data[i].errors = 0;
        pthread_create(&threads[i], NULL, load_users, (void *)&thread_data[i]);
    }

    for (int i = 0; i < 3; i++) {
        pthread_join(threads[i], NULL);
    }

    // Generar reporte de carga
    fprintf(report, "Reporte de carga - %d-%02d-%02d %02d:%02d:%02d\n",
        time_info->tm_year + 1900, time_info->tm_mon + 1, time_info->tm_mday,
        time_info->tm_hour, time_info->tm_min, time_info->tm_sec);

    fprintf(report, "\nDetalles de la carga por hilo:\n");
    int total_loaded_users = 0;
    for (int i = 0; i < 3; i++) {
        fprintf(report, "Hilo %d: %d usuarios cargados\n", 
            thread_data[i].thread_id, thread_data[i].loaded_users);
        total_loaded_users += thread_data[i].loaded_users;
    }
    fprintf(report, "Total de usuarios cargados: %d\n", total_loaded_users);
    fprintf(report, "Total de errores: %d\n", total_errors);
    fclose(report);

    return 0;
}
